name: Main CI
on:
  push:
  pull_request:
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as 	  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-modules:
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - name: tidy
        uses: paulvollmer/action-golang-gosum@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: go mod tidy

  build-binary:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build
      run: go build -v ./... && echo Go Binary built
  
  # build-docker-image:

  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Build the Docker image
  #     run: docker build . --file Dockerfile --tag k8s-api:$(date +%s)

  publish-image:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25
        with:
          cosign-release: 'v1.9.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  Test-on-cluster:
    runs-on: ubuntu-latest
    steps:
      - name: Testing on a k8s Kind Cluster
        uses: helm/kind-action@v1.4.0
      - run: |
          kubectl cluster-info
          kubectl get nodes
    
      - name: Build the Docker image
        uses: actions/checkout@v3
      - run: |
          docker build . --file Dockerfile --tag k8s-api:${{ github.sha }}

      - name : Preparing cluster for kube-ez
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kitarp29/kube-ez/main/yamls/sa.yaml
          kubectl apply -f https://raw.githubusercontent.com/kitarp29/kube-ez/main/yamls/crb.yaml
          MAX_RETRIES=3
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do

              kubectl run kube-ez --image=k8s-api:${{ github.sha }} --port=8000
              
              if kubectl wait --for=condition=Ready pod/kube-ez --timeout=1m; then
                  echo "Pod is ready!"
                  break
              else
                  echo "Pod is not ready, retrying in 5 seconds..."
                  kubectl delete po kube-ez
                  sleep 5
                  RETRY_COUNT=$((RETRY_COUNT+1))
              fi
          done
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to start pod after $MAX_RETRIES retries."
          fi
          kubectl get po
          kubectl describe po kube-ez
          kubectl port-forward kube-ez 8000:8000 &>/dev/null &  
      - run: |
          curl -s http://localhost:8000/

